Backend kısmına geçiş yapmanız, uygulamanızın veri yönetimi, kullanıcı kimlik doğrulaması, ödeme işlemleri gibi daha karmaşık işlevleri gerektirdiğinde önemlidir. Şu anda ürün verilerini frontend'de statik olarak saklıyorsunuz. Backend'e geçiş yaparak bu verileri dinamik hale getirebilir ve daha ölçeklenebilir bir yapı oluşturabilirsiniz.

Backend kısmında yapmanız gerekenler:

Backend Teknolojisi Seçimi:

Node.js ve Express: JavaScript ile yazılmış bir backend framework'ü.
Django: Python ile yazılmış bir backend framework'ü.
Ruby on Rails: Ruby ile yazılmış bir backend framework'ü.
Spring Boot: Java ile yazılmış bir backend framework'ü.
Veritabanı Seçimi:

SQL Veritabanları: MySQL, PostgreSQL, SQLite.
NoSQL Veritabanları: MongoDB, Firebase.
API Oluşturma:

RESTful API veya GraphQL API oluşturabilirsiniz.
Ürün verilerini almak, eklemek, güncellemek ve silmek için gerekli endpoint'leri oluşturun.
Kimlik Doğrulama ve Yetkilendirme:

Kullanıcı kayıt ve giriş işlemleri.
JWT (JSON Web Token) veya OAuth kullanarak kimlik doğrulama.
Ödeme İşlemleri (Opsiyonel):

Stripe veya PayPal gibi ödeme sağlayıcıları entegre edin.
Adım Adım Backend Kurulumu (Node.js ve Express Örneği)
Node.js ve Express Kurulumu:
Node.js ve npm (Node Package Manager) kurulu olduğundan emin olun.
Yeni bir proje oluşturun ve gerekli paketleri yükleyin.


mkdir my-backend
cd my-backend
npm init -y
npm install express mongoose cors


Express Sunucusu Oluşturma: 

const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');

const app = express();
const PORT = process.env.PORT || 5000;

// Middleware
app.use(cors());
app.use(express.json());

// MongoDB Connection
mongoose.connect('mongodb://localhost:27017/mydatabase', {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

// Routes
app.get('/', (req, res) => {
  res.send('Hello World!');
});

// Start Server
app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});



Veritabanı Modeli Oluşturma:

const mongoose = require('mongoose');

const productSchema = new mongoose.Schema({
  description: String,
  price: Number,
  image: String,
});

const Product = mongoose.model('Product', productSchema);

module.exports = Product;



API Endpoint'leri Oluşturma:

const express = require('express');
const Product = require('../models/Product');
const router = express.Router();

// Get All Products
router.get('/', async (req, res) => {
  const products = await Product.find();
  res.json(products);
});

// Get Product by ID
router.get('/:id', async (req, res) => {
  const product = await Product.findById(req.params.id);
  res.json(product);
});

// Create New Product
router.post('/', async (req, res) => {
  const newProduct = new Product(req.body);
  await newProduct.save();
  res.json(newProduct);
});

// Update Product
router.put('/:id', async (req, res) => {
  const updatedProduct = await Product.findByIdAndUpdate(req.params.id, req.body, { new: true });
  res.json(updatedProduct);
});

// Delete Product
router.delete('/:id', async (req, res) => {
  await Product.findByIdAndDelete(req.params.id);
  res.json({ message: 'Product deleted' });
});

module.exports = router;



API Endpoint'lerini Sunucuya Ekleyin:

const productRoutes = require('./routes/products');

// Use Routes
app.use('/api/products', productRoutes);



Frontend ile Entegrasyon:
Frontend'de API çağrıları yaparak ürün verilerini dinamik olarak alın.
Axios veya Fetch API kullanarak backend'den veri çekin.

// Örnek API çağrısı (React)
import axios from 'axios';

const fetchProducts = async () => {
  const response = await axios.get('http://localhost:5000/api/products');
  console.log(response.data);
};

fetchProducts();
